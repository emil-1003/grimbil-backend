// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using grimbil_ef.dbContext;

#nullable disable

namespace grimbil_ef.Migrations
{
    [DbContext(typeof(GrimbildbContext))]
    [Migration("20230320123634_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("grimbil_ef.Models.Comment", b =>
                {
                    b.Property<int>("Commentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("commentid");

                    b.Property<string>("Comment1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("Postid")
                        .HasColumnType("int(11)")
                        .HasColumnName("postid");

                    b.Property<int>("Userid")
                        .HasColumnType("int(11)")
                        .HasColumnName("userid");

                    b.HasKey("Commentid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Postid" }, "FK_comments_posts");

                    b.HasIndex(new[] { "Userid" }, "FK_comments_users");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("grimbil_ef.Models.Picture", b =>
                {
                    b.Property<int>("Pictureid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("pictureid");

                    b.Property<string>("Picture1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("picture");

                    b.Property<int?>("Postid")
                        .HasColumnType("int(11)")
                        .HasColumnName("postid");

                    b.HasKey("Pictureid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Postid" }, "FK_pictures_posts");

                    b.ToTable("pictures", (string)null);
                });

            modelBuilder.Entity("grimbil_ef.Models.Post", b =>
                {
                    b.Property<int>("Postid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("postid");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.Property<int>("Userid")
                        .HasColumnType("int(11)")
                        .HasColumnName("userid");

                    b.HasKey("Postid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Userid" }, "userid");

                    b.ToTable("posts", (string)null);
                });

            modelBuilder.Entity("grimbil_ef.Models.Rating", b =>
                {
                    b.Property<int>("Ratingid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("ratingid");

                    b.Property<int>("Postid")
                        .HasColumnType("int(11)")
                        .HasColumnName("postid");

                    b.Property<int>("Rating1")
                        .HasColumnType("int(11)")
                        .HasColumnName("rating");

                    b.Property<int>("Userid")
                        .HasColumnType("int(11)")
                        .HasColumnName("userid");

                    b.HasKey("Ratingid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Postid" }, "FK_rating_posts");

                    b.HasIndex(new[] { "Userid" }, "FK_rating_users");

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("grimbil_ef.Models.User", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("userid");

                    b.Property<string>("Useremail")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("useremail")
                        .HasDefaultValueSql("''");

                    b.Property<string>("Userpassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("userpassword")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Usertype")
                        .HasColumnType("int(11)")
                        .HasColumnName("usertype");

                    b.HasKey("Userid")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("grimbil_ef.Models.Comment", b =>
                {
                    b.HasOne("grimbil_ef.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("Postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_comments_posts");

                    b.HasOne("grimbil_ef.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_comments_users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("grimbil_ef.Models.Picture", b =>
                {
                    b.HasOne("grimbil_ef.Models.Post", "Post")
                        .WithMany("Pictures")
                        .HasForeignKey("Postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_pictures_posts");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("grimbil_ef.Models.Post", b =>
                {
                    b.HasOne("grimbil_ef.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("grimbil_ef.Models.Rating", b =>
                {
                    b.HasOne("grimbil_ef.Models.Post", "Post")
                        .WithMany("Ratings")
                        .HasForeignKey("Postid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_rating_posts");

                    b.HasOne("grimbil_ef.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_rating_users");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("grimbil_ef.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Pictures");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("grimbil_ef.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
